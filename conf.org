#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Useful packages

 #+BEGIN_SRC emacs-lisp
   (setq my-to-install
         '(cider
           cljr-helm
           company
           clojure-mode
           company-restclient

           dired-details
           diff-hl
           edit-server
           elein
           exec-path-from-shell
           gist
           magit
           magithub

           flycheck
           flycheck-joker
           kibit-helper

           helm
           helm-ag
           helm-projectile
           helm-google

           multiple-cursors
	   powerline
           restclient

           yasnippet
           yasnippet-snippets
           smartparens
           rainbow-delimiters
           rainbow-mode
           sx

           ;; few nice themes
           zenburn-theme
           noctilux-theme
           undo-tree))
 #+END_SRC

* Set up package manager

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (defun install-if-needed (package)
    (unless (package-installed-p package)
      (package-install package)))

  (package-refresh-contents)

  ;; now install all the required packages
  (mapc 'install-if-needed my-to-install)

 #+END_SRC

* Global settings

#+BEGIN_SRC emacs-lisp
(global-flycheck-mode t)
(column-number-mode t)
(display-time-mode t)
(global-company-mode t)
(global-linum-mode t)
(global-prettify-symbols-mode t)
(indent-guide-global-mode t)
(show-paren-mode t)
(smartparens-global-mode t)
(transient-mark-mode t)
(which-function-mode t)

;; rainbow paranthesis
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'rainbow-mode)

(windmove-default-keybindings 'shift)

(projectile-global-mode t)
(yas-global-mode t)
(global-undo-tree-mode t)
#+END_SRC

* Set up magit and magithub

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (require 'magithub)
  (magithub-feature-autoinject t)

  (setq magit-push-always-verify nil)
  ;; use Emacs to edit commit mode
  (global-git-commit-mode t)

  (add-hook 'git-commit-mode-hook
            (lambda ()
              (flyspell-mode t)
              (auto-fill-mode t)))
#+END_SRC

* Cider settings

#+BEGIN_SRC emacs-lisp
  (require 'cider)
  (require 'cider-eldoc)
  (require 'clj-refactor)

  (require 'flycheck-joker)

  (autoload 'clojure-mode "clojure-mode" "clojure mode" t)

  (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

  (add-hook 'clojure-mode-hook 'cider-mode)
  (add-hook 'clojurescript-mode-hook 'cider-mode)

  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq-local cider-repl-use-pretty-printing t)
              (local-set-key [f6] 'cljr-helm)
              (local-set-key (kbd "<C-f5>") 'cider-test-run-test)
              (cider-auto-test-mode t)))

  (setq cider-repl-use-clojure-font-lock t)
#+END_SRC

* Platform specific settings

#+BEGIN_SRC emacs-lisp
  (setq
   ns-alternate-modifier (quote none)
   ns-pop-up-frames 1
   ns-command-modifier (quote meta))
#+END_SRC

* Load a nice theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'noctilux)
#+END_SRC

* Restclient configuration

#+BEGIN_SRC emacs-lisp
  (require 'restclient)
  (require 'outline)
  (require 'outline-magic)

  (add-to-list 'auto-mode-alist '("\\.rest" . restclient-mode))

  (eval-after-load 'outline
    '(progn
       (require 'outline-magic)))

  (add-hook 'restclient-mode-hook 'outline-minor-mode)
  (add-hook 'restclient-mode-hook
            (lambda ()
              (outline-minor-mode t)
              (local-set-key (kbd "<tab>") 'outline-cycle)
              (setq outline-regexp "#+")))

#+END_SRC

* Helm settings

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-projectile)
(require 'helm-config)

(helm-mode t)

(helm-autoresize-mode t)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t
      helm-locate-fuzzy-match t
      helm-use-frame-when-more-than-two-windows nil
      helm-M-x-fuzzy-match t)
#+END_SRC

* Moving around


#+BEGIN_SRC emacs-lisp

(defun ca-next-defun ()
  (interactive)
  (end-of-defun 2)
  (beginning-of-defun 1))

(defun ca-prev-defun ()
  (interactive)
  (beginning-of-defun))

#+END_SRC

* Dired settings

#+BEGIN_SRC emacs-lisp
  (setq
   dired-auto-revert-buffer 1
   dired-isearch-filenames 'dwim)

  (setq dired-listing-switches "-al")

  (require 'dired-details)
  (dired-details-install)

#+END_SRC

* Frame configuration

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'horizontal-scroll-bar-mode) (horizontal-scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (menu-bar-mode -1)

  ;; set up a nicer modeline
  (require 'powerline)
  (setq powerline-arrow-shape 'curve)
  (setq powerline-default-separator-dir '(right . left))
  ;; These two lines you really need.
  (setq sml/theme 'powerline)
  (sml/setup)
#+END_SRC

* Highlighting
  
#+BEGIN_SRC emacs-lisp
  (require 'highlight-blocks)
  (require 'highlight-indent-guides)
  (require 'diff-hl)

  (global-auto-highlight-symbol-mode t)

  (add-hook 'prog-mode-hook 'highlight-blocks-mode)
  (indent-guide-global-mode t)
  (global-diff-hl-mode t)
#+END_SRC

* Global key setup

#+BEGIN_SRC emacs-lisp
  (global-set-key [f2] 'split-window-horizontally)
  (global-set-key [f5] 'helm-imenu)
  (global-set-key [f7] 'helm-projectile-find-file)
  (global-set-key "\C-xg" 'magit-status)

  ;; use helm!
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key "\C-x\C-b" 'helm-buffers-list)

  (global-set-key (kbd "M-p") 'ca-prev-defun)
  (global-set-key (kbd "M-n") 'ca-next-defun)
#+END_SRC
