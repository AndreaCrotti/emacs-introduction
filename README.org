#+TITLE: Emacs Introduction
#+AUTHOR: Andrea Crotti
#+EMAIL: andrea.crotti.0@gmail.com
#+OPTIONS: num:nil ^:nil tex:t toc:nil reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+TOC: listings

* Demo time!

- checkout repository
- start up Cider
- evaluate some code
- do SQL calls with org-mode directly
- do API calls with restclient mode
- use dired and do a magic rename example
- use M-! to spawn commands
- lookup something in stack overflow
- stage and commit changes
- open PR with magithub

* The Church of Emacs

[[./images/stallman.jpg]]

* Some numbers

- first official version in 1984
- ~ 120k Lines of Lisp
- ~ 30k Lines of C
- 557 contributors
- 130k commits

* Some terminology

- buffer
- window
- frame
- kill/yank

* Melpa!

3778 packages!

https://melpa.org/

* Buffer
  
Everything works on buffers:

- *Messages*
- *scratch*
- *Shell Output*

* Major - minor mode

1 Major mode, *many* minor modes.

* Common functions

- *defun*
- *defmacro*
- *defcustom*
- *defvar*
- *setq*
- *add-hook*

* Elisp crash course
** Emacs lisp

 - Lisp 1 language
 - dynamic scoping
 - everything prefixed

** Fibonacci

#+BEGIN_SRC emacs-lisp
   (defun fib (n)
     (cond ((= n 0) 0)
           ((= n 1) 1)
           (t (+ (fib (- n 1))
                 (fib (- n 2))))))
#+END_SRC

** Make it interactive

#+BEGIN_SRC emacs-lisp
  (defun fib-interactive
      (number)
    (interactive "nNumber:\n")
    (message (format "Result is %s" (fib number))))
#+END_SRC

* Questions?
* Configuration
** Useful packages

 #+BEGIN_SRC emacs-lisp
   (setq my-to-install
         '(cider
           cljr-helm
           company
           clojure-mode
           company-restclient

           diff-hl
           edit-server
           elein
           exec-path-from-shell
           gist
           magit
           magithub

           flycheck
           flycheck-joker
           kibit

           helm
           helm-ag
           helm-projectile
           helm-google

           multiple-cursors
           restclient

           yasnippet
           yasnippet-snippets
           smartparens
           rainbow-delimiters
           rainbow-mode
           sx

           ;; few nice themes
           zenburn-theme
           noctilux-theme
           undo-tree))
 #+END_SRC

** Set up package manager

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (defun install-if-needed (package)
    (unless (package-installed-p package)
      (package-install package)))

  (package-refresh-contents)

  ;; now install all the required packages
  (mapc 'install-if-needed my-to-install)

 #+END_SRC

** Global settings

#+BEGIN_SRC emacs-lisp
(global-flycheck-mode t)
(column-number-mode t)
(display-time-mode t)
(global-company-mode t)
(global-linum-mode t)
(global-prettify-symbols-mode t)
(indent-guide-global-mode t)
(show-paren-mode t)
(smartparens-global-mode t)
(transient-mark-mode t)
(which-function-mode t)

;; rainbow paranthesis
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'rainbow-mode)

(windmove-default-keybindings 'shift)

(projectile-global-mode t)
(yas-global-mode t)
(global-undo-tree-mode t)
#+END_SRC

** Set up magit and magithub

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (require 'magithub)
  (magithub-feature-autoinject t)

  (setq magit-push-always-verify nil)
  ;; use Emacs to edit commit mode
  (global-git-commit-mode t)

  (add-hook 'git-commit-mode-hook
            (lambda ()
              (flyspell-mode t)
              (auto-fill-mode t)))
#+END_SRC

** Cider settings

#+BEGIN_SRC emacs-lisp
   (require 'cider)
   (require 'cider-eldoc)
   (require 'clj-refactor)

   (require 'flycheck-joker)

   (autoload 'clojure-mode "clojure-mode" "clojure mode" t)

   (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

   (add-hook 'clojure-mode-hook 'cider-mode)
   (add-hook 'clojurescript-mode-hook 'cider-mode)

   (setq cider-repl-use-clojure-font-lock t
         cider-auto-test-mode t)
#+END_SRC

** Platform specific settings

#+BEGIN_SRC emacs-lisp
  (setq
   ns-alternate-modifier (quote none)
   ns-pop-up-frames 1
   ns-command-modifier (quote meta))
#+END_SRC

** Load a nice theme

#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'noctilux)
#+END_SRC

** Restclient configuration

#+BEGIN_SRC emacs-lisp
  (require 'restclient)
  (require 'outline)
  (require 'outline-magic)

  (add-to-list 'auto-mode-alist '("\\.rest" . restclient-mode))

  (eval-after-load 'outline
    '(progn
       (require 'outline-magic)))

  (add-hook 'restclient-mode-hook 'outline-minor-mode)
  (add-hook 'restclient-mode-hook
            (lambda ()
              (outline-minor-mode t)
              (local-set-key (kbd "<tab>") 'outline-cycle)
              (setq outline-regexp "#+")))

#+END_SRC

** Helm settings

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-projectile)
(require 'helm-config)

(helm-mode t)

(helmq-autoresize-mode t)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t
      helm-locate-fuzzy-match t
      helm-use-frame-when-more-than-two-windows nil
      helm-M-x-fuzzy-match t)
#+END_SRC

** Moving around


#+BEGIN_SRC emacs-lisp

(defun ca-next-defun ()
  (interactive)
  (end-of-defun 2)
  (beginning-of-defun 1))

(defun ca-prev-defun ()
  (interactive)
  (beginning-of-defun))

#+END_SRC

** Global key setup

#+BEGIN_SRC emacs-lisp
  (global-set-key [f2] 'split-window-horizontally)
  (global-set-key [f5] 'helm-imenu)
  (global-set-key [f7] 'helm-projectile-find-file)
  (global-set-key "\C-xg" 'magit-status)

  ;; use helm!
  (global-set-key (kbd "M-x") 'helm-M-x)

  (global-set-key (kbd "M-p") 'ca-prev-defun)
  (global-set-key (kbd "M-n") 'ca-next-defun)
#+END_SRC
